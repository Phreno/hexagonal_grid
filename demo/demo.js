(()=>{"use strict";var e={916:(e,t,n)=>{const a=n(121),r=n(670),o=new a.Diagram;o.drawGrid("layout-test-orientation-pointy","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(25,25),new r.Point(0,0))),o.drawGrid("layout-test-orientation-flat","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(25,25),new r.Point(0,0))),o.drawGrid("layout-test-size-1","hsl(60, 10%, 85%)",!1,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0))),o.drawGrid("layout-test-size-2","hsl(60, 10%, 90%)",!1,new a.Layout(a.Layout.pointy,new r.Point(20,20),new r.Point(0,0))),o.drawGrid("layout-test-size-3","hsl(60, 10%, 85%)",!1,new a.Layout(a.Layout.pointy,new r.Point(40,40),new r.Point(0,0))),o.drawGrid("layout-test-size-tall","hsl(60, 10%, 90%)",!1,new a.Layout(a.Layout.flat,new r.Point(15,25),new r.Point(0,0))),o.drawGrid("layout-test-size-wide","hsl(60, 10%, 85%)",!1,new a.Layout(a.Layout.flat,new r.Point(25,15),new r.Point(0,0))),o.drawGrid("layout-test-y-down","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(25,25),new r.Point(0,0))),o.drawGrid("layout-test-y-up","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(25,-25),new r.Point(0,0))),o.drawGrid("shape-pointy-parallelogram-qr","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(15,15),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteQRS)),o.drawGrid("shape-pointy-parallelogram-sq","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(13,13),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteSQR)),o.drawGrid("shape-pointy-parallelogram-rs","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(15,15),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteRSQ)),o.drawGrid("shape-flat-parallelogram-qr","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(15,15),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteQRS)),o.drawGrid("shape-flat-parallelogram-sq","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(15,15),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteSQR)),o.drawGrid("shape-flat-parallelogram-rs","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(13,13),new r.Point(0,0)),o.shapeParallelogram(-2,-2,2,2,o.permuteRSQ)),o.drawGrid("shape-pointy-triangle-1","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(15,15),new r.Point(-70,-60)),o.shapeTriangle1(5)),o.drawGrid("shape-pointy-triangle-2","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(15,15),new r.Point(-130,-60)),o.shapeTriangle2(5)),o.drawGrid("shape-flat-triangle-1","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(15,15),new r.Point(-60,-70)),o.shapeTriangle1(5)),o.drawGrid("shape-flat-triangle-2","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(15,15),new r.Point(-60,-130)),o.shapeTriangle2(5)),o.drawGrid("shape-pointy-hexagon","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(15,15),new r.Point(0,0)),o.shapeHexagon(3)),o.drawGrid("shape-flat-hexagon","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(15,15),new r.Point(0,0)),o.shapeHexagon(3)),o.drawGrid("shape-pointy-rectangle-qr","hsl(200, 20%, 87%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteQRS)),o.drawGrid("shape-pointy-rectangle-rs","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteRSQ)),o.drawGrid("shape-pointy-rectangle-sq","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteSQR)),o.drawGrid("shape-pointy-rectangle-rq","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteRQS)),o.drawGrid("shape-pointy-rectangle-sr","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteSRQ)),o.drawGrid("shape-pointy-rectangle-qs","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.pointy,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteQSR)),o.drawGrid("shape-flat-rectangle-qr","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteQRS)),o.drawGrid("shape-flat-rectangle-rs","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteRSQ)),o.drawGrid("shape-flat-rectangle-sq","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteSQR)),o.drawGrid("shape-flat-rectangle-rq","hsl(200, 15%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteRQS)),o.drawGrid("shape-flat-rectangle-sr","hsl(60, 10%, 90%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteSRQ)),o.drawGrid("shape-flat-rectangle-qs","hsl(60, 10%, 85%)",!0,new a.Layout(a.Layout.flat,new r.Point(10,10),new r.Point(0,0)),o.shapeRectangle(8,6,o.permuteQSR))},166:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Diagram=void 0;const a=n(685);var r;!function(e){e.Stroke="black",e.GridOrigin="hsl(0, 50%, 0%)",e.HexQ="hsl(90, 70%, 35%)",e.HexR="hsl(200, 100%, 35%)",e.HexS="hsl(300, 40%, 50%)",e.Hex="hsl(0, 0%, 50%)"}(r||(r={})),t.Diagram=class{drawHex({canvas:e,layout:t,hex:n,strokeStyle:a=r.Stroke,lineWidth:o=1}){let i;if(this.checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:n}),!(e instanceof CanvasRenderingContext2D))throw new Error("wrong canvas type");i=t.polygonCorners(n),e.beginPath(),e.strokeStyle=a,e.lineWidth=o,e.moveTo(i[5].x,i[5].y),[...Array(6).keys()].forEach((t=>e.lineTo(i[t].x,i[t].y))),e.stroke()}checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:n}){if(![e,t,n].every((e=>e)))throw new Error("missing args")}colorForHex(e){if(!e)throw new Error("missing args");return 0===e.q&&0===e.r&&0===e.s?r.GridOrigin:0===e.q?r.HexQ:0===e.r?r.HexR:0===e.s?r.HexS:r.Hex}drawHexLabel({canvas:e,layout:t,hex:n}){if(this.checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:n}),!(e instanceof CanvasRenderingContext2D))throw new Error("wrong canvas type");{const a=Math.round(.5*Math.min(Math.abs(t.size.x),Math.abs(t.size.y))),r=t.hexToPixel(n);e.fillStyle=this.colorForHex(n),e.font=`${a}px sans-serif`,e.textAlign="center",e.textBaseline="middle",e.fillText(0===n.len()?"q,r,s":n.q+","+n.r+","+n.s,r.x,r.y)}}permuteQRS({q:e,r:t,s:n}){return new a.Hex(e,t,n)}permuteSRQ({q:e,r:t,s:n}){return new a.Hex(n,t,e)}permuteSQR({q:e,r:t,s:n}){return new a.Hex(n,e,t)}permuteRQS({q:e,r:t,s:n}){return new a.Hex(t,e,n)}permuteRSQ({q:e,r:t,s:n}){return new a.Hex(t,n,e)}permuteQSR({q:e,r:t,s:n}){return new a.Hex(e,n,t)}shapeParallelogram(e,t,n,a,r){const o=[];for(let i=e;i<=n;i++)for(let e=t;e<=a;e++)o.push(r({q:i,r:e,s:-i-e}));return o}shapeTriangle1(e){const t=[];for(let n=0;n<=e;n++)for(let r=0;r<=e-n;r++)t.push(new a.Hex(n,r,-n-r));return t}shapeTriangle2(e){const t=[];for(let n=0;n<=e;n++)for(let r=e-n;r<=e;r++)t.push(new a.Hex(n,r,-n-r));return t}shapeHexagon(e){const t=[];for(let n=-e;n<=e;n++){const r=Math.max(-e,-n-e),o=Math.min(e,-n+e);for(let e=r;e<=o;e++)t.push(new a.Hex(n,e,-n-e))}return t}shapeRectangle(e,t,n){const a=[],r=-Math.floor(e/2),o=r+e,i=-Math.floor(t/2),s=i+t;for(let e=i;e<s;e++){const t=-Math.floor(e/2);for(let i=r+t;i<o+t;i++)a.push(n({q:i,r:e,s:-i-e}))}return a}drawGrid(e,t,n,a,r){const o=document.getElementById(e);if(!o)return;const i=o.getContext("2d");if(!i)return;const s=o.width,l=o.height;window.devicePixelRatio&&1!==window.devicePixelRatio&&(o.width=s*window.devicePixelRatio,o.height=l*window.devicePixelRatio,i.scale(window.devicePixelRatio,window.devicePixelRatio)),r||(r=this.shapeRectangle(15,15,this.permuteQRS)),i.fillStyle=t,i.fillRect(0,0,s,l),i.translate(s/2,l/2),r.forEach((e=>{this.drawHex({canvas:i,layout:a,hex:e}),n&&this.drawHexLabel({canvas:i,layout:a,hex:e})}))}}},685:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Hex=void 0;class n{constructor(e,t,n){if(this.q=e,this.r=t,this.s=n,0!==Math.round(e+t+n))throw Error("q + r + s must be 0")}add(e){return new n(this.q+e.q,this.r+e.r,this.s+e.s)}subtract(e){return new n(this.q-e.q,this.r-e.r,this.s-e.s)}scale(e){return new n(this.q*e,this.r*e,this.s*e)}rotateLeft(){return new n(-this.s,-this.q,-this.r)}rotateRight(){return new n(-this.r,-this.s,-this.q)}static direction(e){return n.directions[e]}neighbor(e){return this.add(n.direction(e))}diagonalNeighbor(e){return this.add(n.diagonals[e])}len(){return(Math.abs(this.q)+Math.abs(this.r)+Math.abs(this.s))/2}distance(e){return this.subtract(e).len()}round(){let e=Math.round(this.q),t=Math.round(this.r),a=Math.round(this.s);const r=Math.abs(e-this.q),o=Math.abs(t-this.r),i=Math.abs(a-this.s);return r>o&&r>i?e=-t-a:o>i?t=-e-a:a=-e-t,new n(e,t,a)}lerp(e,t){return new n(this.q*(1-t)+e.q*t,this.r*(1-t)+e.r*t,this.s*(1-t)+e.s*t)}linedraw(e){const t=this.distance(e),a=new n(this.q+1e-6,this.r+1e-6,this.s-2e-6),r=new n(e.q+1e-6,e.r+1e-6,e.s-2e-6),o=[],i=1/Math.max(t,1);for(let e=0;e<=t;e++)o.push(a.lerp(r,i*e).round());return o}}t.Hex=n,n.directions=[new n(1,0,-1),new n(1,-1,0),new n(0,-1,1),new n(-1,0,1),new n(-1,1,0),new n(0,1,-1)],n.diagonals=[new n(2,-1,-1),new n(1,-2,1),new n(-1,-1,2),new n(-2,1,1),new n(-1,2,-1),new n(1,1,-2)]},243:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Layout=void 0;const a=n(654),r=n(670),o=n(685);class i{constructor(e,t,n){this.orientation=e,this.size=t,this.origin=n}hexToPixel(e){const t=this.orientation,n=this.size,a=this.origin,o=(t.f0*e.q+t.f1*e.r)*n.x,i=(t.f2*e.q+t.f3*e.r)*n.y;return new r.Point(o+a.x,i+a.y)}pixelToHex(e){const t=this.orientation,n=this.size,a=this.origin,i=new r.Point((e.x-a.x)/n.x,(e.y-a.y)/n.y),s=t.b0*i.x+t.b1*i.y,l=t.b2*i.x+t.b3*i.y;return new o.Hex(s,l,-s-l)}hexCornerOffset(e){const t=this.orientation,n=this.size,a=2*Math.PI*(t.startAngle-e)/6;return new r.Point(n.x*Math.cos(a),n.y*Math.sin(a))}polygonCorners(e){const t=[],n=this.hexToPixel(e);for(let e=0;e<6;e++){const a=this.hexCornerOffset(e);t.push(new r.Point(n.x+a.x,n.y+a.y))}return t}}t.Layout=i,i.pointy=new a.Orientation(Math.sqrt(3),Math.sqrt(3)/2,0,1.5,Math.sqrt(3)/3,-1/3,0,2/3,.5),i.flat=new a.Orientation(1.5,0,Math.sqrt(3)/2,Math.sqrt(3),2/3,0,-1/3,Math.sqrt(3)/3,0)},654:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Orientation=void 0,t.Orientation=class{constructor(e,t,n,a,r,o,i,s,l){this.f0=e,this.f1=t,this.f2=n,this.f3=a,this.b0=r,this.b1=o,this.b2=i,this.b3=s,this.startAngle=l}}},670:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Point=void 0,t.Point=class{constructor(e,t){this.x=e,this.y=t}}},121:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Diagram=t.Point=t.Hex=t.Layout=void 0;const a=n(243);Object.defineProperty(t,"Layout",{enumerable:!0,get:function(){return a.Layout}});const r=n(685);Object.defineProperty(t,"Hex",{enumerable:!0,get:function(){return r.Hex}});const o=n(670);Object.defineProperty(t,"Point",{enumerable:!0,get:function(){return o.Point}});const i=n(166);Object.defineProperty(t,"Diagram",{enumerable:!0,get:function(){return i.Diagram}})}},t={};!function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{}};return e[a](r,r.exports,n),r.exports}(916)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,