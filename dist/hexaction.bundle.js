(()=>{"use strict";var e={166:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Diagram=void 0;const s=r(685);var n;!function(e){e.Stroke="black",e.GridOrigin="hsl(0, 50%, 0%)",e.HexQ="hsl(90, 70%, 35%)",e.HexR="hsl(200, 100%, 35%)",e.HexS="hsl(300, 40%, 50%)",e.Hex="hsl(0, 0%, 50%)"}(n||(n={})),t.Diagram=class{drawHex({canvas:e,layout:t,hex:r,strokeStyle:s=n.Stroke,lineWidth:i=1}){let o;if(this.checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:r}),!(e instanceof CanvasRenderingContext2D))throw new Error("wrong canvas type");o=t.polygonCorners(r),e.beginPath(),e.strokeStyle=s,e.lineWidth=i,e.moveTo(o[5].x,o[5].y),[...Array(6).keys()].forEach((t=>e.lineTo(o[t].x,o[t].y))),e.stroke()}checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:r}){if(![e,t,r].every((e=>e)))throw new Error("missing args")}colorForHex(e){if(!e)throw new Error("missing args");return 0===e.q&&0===e.r&&0===e.s?n.GridOrigin:0===e.q?n.HexQ:0===e.r?n.HexR:0===e.s?n.HexS:n.Hex}drawHexLabel({canvas:e,layout:t,hex:r}){if(this.checkDrawHexContextMissingArgs({canvas:e,layout:t,hex:r}),!(e instanceof CanvasRenderingContext2D))throw new Error("wrong canvas type");{const s=Math.round(.5*Math.min(Math.abs(t.size.x),Math.abs(t.size.y))),n=t.hexToPixel(r);e.fillStyle=this.colorForHex(r),e.font=`${s}px sans-serif`,e.textAlign="center",e.textBaseline="middle",e.fillText(0===r.len()?"q,r,s":r.q+","+r.r+","+r.s,n.x,n.y)}}permuteQRS({q:e,r:t,s:r}){return new s.Hex(e,t,r)}permuteSRQ({q:e,r:t,s:r}){return new s.Hex(r,t,e)}permuteSQR({q:e,r:t,s:r}){return new s.Hex(r,e,t)}permuteRQS({q:e,r:t,s:r}){return new s.Hex(t,e,r)}permuteRSQ({q:e,r:t,s:r}){return new s.Hex(t,r,e)}permuteQSR({q:e,r:t,s:r}){return new s.Hex(e,r,t)}shapeParallelogram(e,t,r,s,n){const i=[];for(let o=e;o<=r;o++)for(let e=t;e<=s;e++)i.push(n({q:o,r:e,s:-o-e}));return i}shapeTriangle1(e){const t=[];for(let r=0;r<=e;r++)for(let n=0;n<=e-r;n++)t.push(new s.Hex(r,n,-r-n));return t}shapeTriangle2(e){const t=[];for(let r=0;r<=e;r++)for(let n=e-r;n<=e;n++)t.push(new s.Hex(r,n,-r-n));return t}shapeHexagon(e){const t=[];for(let r=-e;r<=e;r++){const n=Math.max(-e,-r-e),i=Math.min(e,-r+e);for(let e=n;e<=i;e++)t.push(new s.Hex(r,e,-r-e))}return t}shapeRectangle(e,t,r){const s=[],n=-Math.floor(e/2),i=n+e,o=-Math.floor(t/2),a=o+t;for(let e=o;e<a;e++){const t=-Math.floor(e/2);for(let o=n+t;o<i+t;o++)s.push(r({q:o,r:e,s:-o-e}))}return s}drawGrid(e,t,r,s,n){const i=document.getElementById(e);if(!i)return;const o=i.getContext("2d");if(!o)return;const a=i.width,h=i.height;window.devicePixelRatio&&1!==window.devicePixelRatio&&(i.width=a*window.devicePixelRatio,i.height=h*window.devicePixelRatio,o.scale(window.devicePixelRatio,window.devicePixelRatio)),n||(n=this.shapeRectangle(15,15,this.permuteQRS)),o.fillStyle=t,o.fillRect(0,0,a,h),o.translate(a/2,h/2),n.forEach((e=>{this.drawHex({canvas:o,layout:s,hex:e}),r&&this.drawHexLabel({canvas:o,layout:s,hex:e})}))}}},685:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Hex=void 0;class r{constructor(e,t,r){if(this.q=e,this.r=t,this.s=r,0!==Math.round(e+t+r))throw Error("q + r + s must be 0")}add(e){return new r(this.q+e.q,this.r+e.r,this.s+e.s)}subtract(e){return new r(this.q-e.q,this.r-e.r,this.s-e.s)}scale(e){return new r(this.q*e,this.r*e,this.s*e)}rotateLeft(){return new r(-this.s,-this.q,-this.r)}rotateRight(){return new r(-this.r,-this.s,-this.q)}static direction(e){return r.directions[e]}neighbor(e){return this.add(r.direction(e))}diagonalNeighbor(e){return this.add(r.diagonals[e])}len(){return(Math.abs(this.q)+Math.abs(this.r)+Math.abs(this.s))/2}distance(e){return this.subtract(e).len()}round(){let e=Math.round(this.q),t=Math.round(this.r),s=Math.round(this.s);const n=Math.abs(e-this.q),i=Math.abs(t-this.r),o=Math.abs(s-this.s);return n>i&&n>o?e=-t-s:i>o?t=-e-s:s=-e-t,new r(e,t,s)}lerp(e,t){return new r(this.q*(1-t)+e.q*t,this.r*(1-t)+e.r*t,this.s*(1-t)+e.s*t)}linedraw(e){const t=this.distance(e),s=new r(this.q+1e-6,this.r+1e-6,this.s-2e-6),n=new r(e.q+1e-6,e.r+1e-6,e.s-2e-6),i=[],o=1/Math.max(t,1);for(let e=0;e<=t;e++)i.push(s.lerp(n,o*e).round());return i}}t.Hex=r,r.directions=[new r(1,0,-1),new r(1,-1,0),new r(0,-1,1),new r(-1,0,1),new r(-1,1,0),new r(0,1,-1)],r.diagonals=[new r(2,-1,-1),new r(1,-2,1),new r(-1,-1,2),new r(-2,1,1),new r(-1,2,-1),new r(1,1,-2)]},243:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Layout=void 0;const s=r(654),n=r(670),i=r(685);class o{constructor(e,t,r){this.orientation=e,this.size=t,this.origin=r}hexToPixel(e){const t=this.orientation,r=this.size,s=this.origin,i=(t.f0*e.q+t.f1*e.r)*r.x,o=(t.f2*e.q+t.f3*e.r)*r.y;return new n.Point(i+s.x,o+s.y)}pixelToHex(e){const t=this.orientation,r=this.size,s=this.origin,o=new n.Point((e.x-s.x)/r.x,(e.y-s.y)/r.y),a=t.b0*o.x+t.b1*o.y,h=t.b2*o.x+t.b3*o.y;return new i.Hex(a,h,-a-h)}hexCornerOffset(e){const t=this.orientation,r=this.size,s=2*Math.PI*(t.startAngle-e)/6;return new n.Point(r.x*Math.cos(s),r.y*Math.sin(s))}polygonCorners(e){const t=[],r=this.hexToPixel(e);for(let e=0;e<6;e++){const s=this.hexCornerOffset(e);t.push(new n.Point(r.x+s.x,r.y+s.y))}return t}}t.Layout=o,o.pointy=new s.Orientation(Math.sqrt(3),Math.sqrt(3)/2,0,1.5,Math.sqrt(3)/3,-1/3,0,2/3,.5),o.flat=new s.Orientation(1.5,0,Math.sqrt(3)/2,Math.sqrt(3),2/3,0,-1/3,Math.sqrt(3)/3,0)},654:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Orientation=void 0,t.Orientation=class{constructor(e,t,r,s,n,i,o,a,h){this.f0=e,this.f1=t,this.f2=r,this.f3=s,this.b0=n,this.b1=i,this.b2=o,this.b3=a,this.startAngle=h}}},670:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Point=void 0,t.Point=class{constructor(e,t){this.x=e,this.y=t}}},121:(e,t,r)=>{r(243),r(685),r(670),r(166)}},t={};!function r(s){if(t[s])return t[s].exports;var n=t[s]={exports:{}};return e[s](n,n.exports,r),n.exports}(121)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,